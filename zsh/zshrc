export PATH="/opt/homebrew/bin:/usr/local/bin:$PATH"

# Add FVM to path
export PATH="~/fvm/default/bin:$PATH"

# https://superuser.com/questions/313650/resume-zsh-terminal-os-x-lion/328148#328148
# Tell the terminal about the working directory whenever it changes.
if [[ "$TERM_PROGRAM" == "Apple_Terminal" ]] && [[ -z "$INSIDE_EMACS" ]]; then

    update_terminal_cwd() {
        # Identify the directory using a "file:" scheme URL, including
        # the host name to disambiguate local vs. remote paths.

        # Percent-encode the pathname.
        local url_path=''
        {
            # Use LC_CTYPE=C to process text byte-by-byte. Ensure that
            # LC_ALL isn't set, so it doesn't interfere.
            local i ch hexch LC_CTYPE=C LC_ALL=
            for ((i = 1; i <= ${#PWD}; ++i)); do
                ch="$PWD[i]"
                if [[ "$ch" =~ [/._~A-Za-z0-9-] ]]; then
                    url_path+="$ch"
                else
                    printf -v hexch "%02X" "'$ch"
                    url_path+="%$hexch"
                fi
            done
        }

        printf '\e]7;%s\a' "file://$HOST$url_path"
    }

    # Register the function so it is called at each prompt.
    autoload add-zsh-hook
    add-zsh-hook precmd update_terminal_cwd
fi

# Allow colors
autoload -U colors; colors

# Load shims for rbenv
if command which rbenv > /dev/null; then
  eval "$(rbenv init -)";
fi

# Helps with git-ps-rs auto complete
fpath=(/opt/homebrew/share/zsh/site-functions/ $fpath)

# ---- Command Completion ----
# ----------------------------
autoload -U compinit; compinit
# Show completion on first TAB
setopt menucomplete

# ---- Vi for editing command line ----
# --------------------------------------
set -o vi

# ---- History ----
# -----------------
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zhistory
# Adds history as soon as they are entered
setopt INC_APPEND_HISTORY
# Removes duplicate lines from history
setopt HIST_IGNORE_ALL_DUPS

alias g='git '
alias gc='git commit -v '
alias gco='git checkout '
alias ga='git add '
alias gap='git add -p '
alias gd='git diff '
alias gf='git fetch -p '
alias gb='git branch '
alias gcm='git checkout master'
alias gcn='git checkout main'
alias gst='git status'
alias grbi='git rebase -i '
alias grbc='git rebase --continue '
alias cl='clear'
alias gps='git-ps '
alias gpsr='git-ps rebase '
alias gpsl='git-ps ls'
alias gpsp='git-ps pull'

#Flutter
alias ff='fvm flutter '
alias fd='fvm dart '

# ---- Prompt ----
# ----------------
# http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Version-Control-Information
#
# Load version control system from zsh
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )

#Enable only git
zstyle ':vcs_info:*' enable git
#location of git
zstyle ':vcs_info:git' command /usr/local/bin/git
#Look for staged and unstaged changes
zstyle ':vcs_info:git*' check-for-changes true
#Turn on getting the git sha
zstyle ':vcs_info:git*' get-revision true
#Format for %m in action format (rebase)
zstyle ':vcs_info:git*' patch-format '%F{magenta}applying %n/%a Current - %7.7p%f'
#Style for when there are unstaged changes - %u
zstyle ':vcs_info:git*' unstagedstr '%F{red}*%f'
#Style for when there are staged changes - %c
zstyle ':vcs_info:git*' stagedstr '%F{green}+%f'
#Format of vcs_info_msg
zstyle ':vcs_info:git*' formats '%b%u%c %F{magenta}%7.7i%f'
#format of vcs_info_msg when special action happening (rebase etc.)
zstyle ':vcs_info:git*' actionformats '(%a) %b%u%c %F{red}%7.7i %m%f'
#Add style for untracked files to be added to %u output
zstyle ':vcs_info:git+set-message:*' hooks git-untracked
+vi-git-untracked(){
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
        git status --porcelain | grep '??' &> /dev/null ; then
        hook_com[unstaged]+='%F{yellow}x%f'
    fi
}

# parameter expansion, command substitution and arithmetic expansion are
# performed in prompts.
setopt prompt_subst

PROMPT="%{${fg[green]}%}%~ %{${fg[cyan]}%}\$vcs_info_msg_0_
%{${fg[green]}%}$ %{$reset_color%}"

RUBYVERSION='$(rbenv version-name)'
RPROMPT="%{${fg[red]}%}${RUBYVERSION} %{${fg[blue]}%}%w ðŸ•‘  %D{%L:%M:%S}%{${fg[default]}%}"

# https://github.com/nvm-sh/nvm/tree/v0.39.0
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
# place this after nvm initialization!
autoload -U add-zsh-hook
load-nvmrc() {
  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc

# pyenv
# https://github.com/pyenv/pyenv#homebrew-in-macos
eval "$(pyenv init -)"
